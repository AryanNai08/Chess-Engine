The Rook is part of the royal family in chess and is considered one of the most powerful pieces after the Queen. The Rook can move both horizontally and vertically across the board, as long as there are no obstacles in its path.

@@ Package and Import
The Rook class is part of the pieces package and imports:

Board: To add the piece to the board and access the board's tiles.
BufferedImage: To retrieve and scale the Rook's sprite from the sprite sheet.

@@ Class and Constructor
The Rook class extends the Piece class and uses its parent class's variables as arguments in the constructor to define its structure. The constructor initializes:

col and row: The Rook's starting position.
xPos and yPos: Pixel coordinates on the board, based on the tile size.
isWhite: Indicates if the Rook is a white or black piece.
name: Sets the piece's name as "Rook."

Extracts the Rook's image from the sprite sheet using 4 * sheetscale to locate the Rook's position on the sheet.
Scales the image to fit the tile size of the board.

@@ Method: isValidMovement
This method ensures the Rook can move along a straight line in either the horizontal (same row) or vertical (same column) direction, provided there are no obstacles in its path.

Logic:
this.col == col: Validates movement along the same column (vertical).
this.row == row: Validates movement along the same row (horizontal).
If the above conditions are met, it further checks for any obstacles using the moveCollidesWithPiece method.
Examples:
If the Rook is at position (4, 4):

Valid Moves:
Horizontal: (0, 4), (7, 4), etc.
Vertical: (4, 0), (4, 7), etc.
Invalid Moves:
Diagonal: (3, 3), (5, 5), etc.
@@ Method: moveCollidesWithPiece
This method handles situations where the Rook moves to another end of its row or column but may encounter other pieces in between. It checks for collisions in all four directions.

Logic Breakdown:

    Horizontal Checks:

    Left:
        If the target column is to the left of the Rook's current column (this.col > col), iterate through all squares between this.col - 1 and col.
        Return true if any square contains a piece.

    Right:
        If the target column is to the right (this.col < col), iterate through squares between this.col + 1 and col.
        Return true if any square contains a piece.


    Vertical Checks:

    Up:
        If the target row is above the Rook's current row (this.row > row), iterate through squares between this.row - 1 and row.
        Return true if any square contains a piece.

    Down:
        If the target row is below (this.row < row), iterate through squares between this.row + 1 and row.
        Return true if any square contains a piece.

    Edge Cases:
        If the Rook is adjacent to the target square, there are no intermediate squares, and no collision is possible.
        If the target square is occupied by a friendly piece, the method returns true (Rook cannot capture its own piece).